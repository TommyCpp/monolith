// This file is generated by rust-protobuf 2.10.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(warnings)]
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `types.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_2;

#[derive(PartialEq,Clone,Default)]
pub struct Sample {
    // message fields
    pub value: f64,
    pub timestamp: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Sample {
    fn default() -> &'a Sample {
        <Sample as ::protobuf::Message>::default_instance()
    }
}

impl Sample {
    pub fn new() -> Sample {
        ::std::default::Default::default()
    }

    // double value = 1;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }

    // int64 timestamp = 2;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for Sample {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 9;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        if self.timestamp != 0 {
            os.write_int64(2, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Sample {
        Sample::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "value",
                    |m: &Sample| { &m.value },
                    |m: &mut Sample| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "timestamp",
                    |m: &Sample| { &m.timestamp },
                    |m: &mut Sample| { &mut m.timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Sample>(
                    "Sample",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Sample {
        static mut instance: ::protobuf::lazy::Lazy<Sample> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Sample,
        };
        unsafe {
            instance.get(Sample::new)
        }
    }
}

impl ::protobuf::Clear for Sample {
    fn clear(&mut self) {
        self.value = 0.;
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Sample {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sample {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TimeSeries {
    // message fields
    pub labels: ::protobuf::RepeatedField<Label>,
    pub samples: ::protobuf::RepeatedField<Sample>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TimeSeries {
    fn default() -> &'a TimeSeries {
        <TimeSeries as ::protobuf::Message>::default_instance()
    }
}

impl TimeSeries {
    pub fn new() -> TimeSeries {
        ::std::default::Default::default()
    }

    // repeated .prometheus.Label labels = 1;


    pub fn get_labels(&self) -> &[Label] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<Label>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<Label> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<Label> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }

    // repeated .prometheus.Sample samples = 2;


    pub fn get_samples(&self) -> &[Sample] {
        &self.samples
    }
    pub fn clear_samples(&mut self) {
        self.samples.clear();
    }

    // Param is passed by value, moved
    pub fn set_samples(&mut self, v: ::protobuf::RepeatedField<Sample>) {
        self.samples = v;
    }

    // Mutable pointer to the field.
    pub fn mut_samples(&mut self) -> &mut ::protobuf::RepeatedField<Sample> {
        &mut self.samples
    }

    // Take field
    pub fn take_samples(&mut self) -> ::protobuf::RepeatedField<Sample> {
        ::std::mem::replace(&mut self.samples, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TimeSeries {
    fn is_initialized(&self) -> bool {
        for v in &self.labels {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.samples {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.labels)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.samples)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.samples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.labels {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.samples {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimeSeries {
        TimeSeries::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Label>>(
                    "labels",
                    |m: &TimeSeries| { &m.labels },
                    |m: &mut TimeSeries| { &mut m.labels },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Sample>>(
                    "samples",
                    |m: &TimeSeries| { &m.samples },
                    |m: &mut TimeSeries| { &mut m.samples },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TimeSeries>(
                    "TimeSeries",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TimeSeries {
        static mut instance: ::protobuf::lazy::Lazy<TimeSeries> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TimeSeries,
        };
        unsafe {
            instance.get(TimeSeries::new)
        }
    }
}

impl ::protobuf::Clear for TimeSeries {
    fn clear(&mut self) {
        self.labels.clear();
        self.samples.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimeSeries {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeSeries {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Label {
    // message fields
    pub name: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Label {
    fn default() -> &'a Label {
        <Label as ::protobuf::Message>::default_instance()
    }
}

impl Label {
    pub fn new() -> Label {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Label {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Label {
        Label::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Label| { &m.name },
                    |m: &mut Label| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &Label| { &m.value },
                    |m: &mut Label| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Label>(
                    "Label",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Label {
        static mut instance: ::protobuf::lazy::Lazy<Label> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Label,
        };
        unsafe {
            instance.get(Label::new)
        }
    }
}

impl ::protobuf::Clear for Label {
    fn clear(&mut self) {
        self.name.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Label {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Label {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Labels {
    // message fields
    pub labels: ::protobuf::RepeatedField<Label>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Labels {
    fn default() -> &'a Labels {
        <Labels as ::protobuf::Message>::default_instance()
    }
}

impl Labels {
    pub fn new() -> Labels {
        ::std::default::Default::default()
    }

    // repeated .prometheus.Label labels = 1;


    pub fn get_labels(&self) -> &[Label] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<Label>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<Label> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<Label> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Labels {
    fn is_initialized(&self) -> bool {
        for v in &self.labels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.labels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.labels {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Labels {
        Labels::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Label>>(
                    "labels",
                    |m: &Labels| { &m.labels },
                    |m: &mut Labels| { &mut m.labels },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Labels>(
                    "Labels",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Labels {
        static mut instance: ::protobuf::lazy::Lazy<Labels> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Labels,
        };
        unsafe {
            instance.get(Labels::new)
        }
    }
}

impl ::protobuf::Clear for Labels {
    fn clear(&mut self) {
        self.labels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Labels {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Labels {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LabelMatcher {
    // message fields
    pub field_type: LabelMatcher_Type,
    pub name: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LabelMatcher {
    fn default() -> &'a LabelMatcher {
        <LabelMatcher as ::protobuf::Message>::default_instance()
    }
}

impl LabelMatcher {
    pub fn new() -> LabelMatcher {
        ::std::default::Default::default()
    }

    // .prometheus.LabelMatcher.Type type = 1;


    pub fn get_field_type(&self) -> LabelMatcher_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = LabelMatcher_Type::EQ;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: LabelMatcher_Type) {
        self.field_type = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string value = 3;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LabelMatcher {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != LabelMatcher_Type::EQ {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != LabelMatcher_Type::EQ {
            os.write_enum(1, self.field_type.value())?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.value.is_empty() {
            os.write_string(3, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LabelMatcher {
        LabelMatcher::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LabelMatcher_Type>>(
                    "type",
                    |m: &LabelMatcher| { &m.field_type },
                    |m: &mut LabelMatcher| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &LabelMatcher| { &m.name },
                    |m: &mut LabelMatcher| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &LabelMatcher| { &m.value },
                    |m: &mut LabelMatcher| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LabelMatcher>(
                    "LabelMatcher",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LabelMatcher {
        static mut instance: ::protobuf::lazy::Lazy<LabelMatcher> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LabelMatcher,
        };
        unsafe {
            instance.get(LabelMatcher::new)
        }
    }
}

impl ::protobuf::Clear for LabelMatcher {
    fn clear(&mut self) {
        self.field_type = LabelMatcher_Type::EQ;
        self.name.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LabelMatcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LabelMatcher {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LabelMatcher_Type {
    EQ = 0,
    NEQ = 1,
    RE = 2,
    NRE = 3,
}

impl ::protobuf::ProtobufEnum for LabelMatcher_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LabelMatcher_Type> {
        match value {
            0 => ::std::option::Option::Some(LabelMatcher_Type::EQ),
            1 => ::std::option::Option::Some(LabelMatcher_Type::NEQ),
            2 => ::std::option::Option::Some(LabelMatcher_Type::RE),
            3 => ::std::option::Option::Some(LabelMatcher_Type::NRE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LabelMatcher_Type] = &[
            LabelMatcher_Type::EQ,
            LabelMatcher_Type::NEQ,
            LabelMatcher_Type::RE,
            LabelMatcher_Type::NRE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("LabelMatcher_Type", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for LabelMatcher_Type {
}

impl ::std::default::Default for LabelMatcher_Type {
    fn default() -> Self {
        LabelMatcher_Type::EQ
    }
}

impl ::protobuf::reflect::ProtobufValue for LabelMatcher_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadHints {
    // message fields
    pub step_ms: i64,
    pub func: ::std::string::String,
    pub start_ms: i64,
    pub end_ms: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadHints {
    fn default() -> &'a ReadHints {
        <ReadHints as ::protobuf::Message>::default_instance()
    }
}

impl ReadHints {
    pub fn new() -> ReadHints {
        ::std::default::Default::default()
    }

    // int64 step_ms = 1;


    pub fn get_step_ms(&self) -> i64 {
        self.step_ms
    }
    pub fn clear_step_ms(&mut self) {
        self.step_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_step_ms(&mut self, v: i64) {
        self.step_ms = v;
    }

    // string func = 2;


    pub fn get_func(&self) -> &str {
        &self.func
    }
    pub fn clear_func(&mut self) {
        self.func.clear();
    }

    // Param is passed by value, moved
    pub fn set_func(&mut self, v: ::std::string::String) {
        self.func = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_func(&mut self) -> &mut ::std::string::String {
        &mut self.func
    }

    // Take field
    pub fn take_func(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.func, ::std::string::String::new())
    }

    // int64 start_ms = 3;


    pub fn get_start_ms(&self) -> i64 {
        self.start_ms
    }
    pub fn clear_start_ms(&mut self) {
        self.start_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_ms(&mut self, v: i64) {
        self.start_ms = v;
    }

    // int64 end_ms = 4;


    pub fn get_end_ms(&self) -> i64 {
        self.end_ms
    }
    pub fn clear_end_ms(&mut self) {
        self.end_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_ms(&mut self, v: i64) {
        self.end_ms = v;
    }
}

impl ::protobuf::Message for ReadHints {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.step_ms = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.func)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_ms = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.end_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.step_ms != 0 {
            my_size += ::protobuf::rt::value_size(1, self.step_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.func.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.func);
        }
        if self.start_ms != 0 {
            my_size += ::protobuf::rt::value_size(3, self.start_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_ms != 0 {
            my_size += ::protobuf::rt::value_size(4, self.end_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.step_ms != 0 {
            os.write_int64(1, self.step_ms)?;
        }
        if !self.func.is_empty() {
            os.write_string(2, &self.func)?;
        }
        if self.start_ms != 0 {
            os.write_int64(3, self.start_ms)?;
        }
        if self.end_ms != 0 {
            os.write_int64(4, self.end_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadHints {
        ReadHints::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "step_ms",
                    |m: &ReadHints| { &m.step_ms },
                    |m: &mut ReadHints| { &mut m.step_ms },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "func",
                    |m: &ReadHints| { &m.func },
                    |m: &mut ReadHints| { &mut m.func },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "start_ms",
                    |m: &ReadHints| { &m.start_ms },
                    |m: &mut ReadHints| { &mut m.start_ms },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "end_ms",
                    |m: &ReadHints| { &m.end_ms },
                    |m: &mut ReadHints| { &mut m.end_ms },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReadHints>(
                    "ReadHints",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadHints {
        static mut instance: ::protobuf::lazy::Lazy<ReadHints> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReadHints,
        };
        unsafe {
            instance.get(ReadHints::new)
        }
    }
}

impl ::protobuf::Clear for ReadHints {
    fn clear(&mut self) {
        self.step_ms = 0;
        self.func.clear();
        self.start_ms = 0;
        self.end_ms = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadHints {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadHints {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Chunk {
    // message fields
    pub min_time_ms: i64,
    pub max_time_ms: i64,
    pub field_type: Chunk_Encoding,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Chunk {
    fn default() -> &'a Chunk {
        <Chunk as ::protobuf::Message>::default_instance()
    }
}

impl Chunk {
    pub fn new() -> Chunk {
        ::std::default::Default::default()
    }

    // int64 min_time_ms = 1;


    pub fn get_min_time_ms(&self) -> i64 {
        self.min_time_ms
    }
    pub fn clear_min_time_ms(&mut self) {
        self.min_time_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_time_ms(&mut self, v: i64) {
        self.min_time_ms = v;
    }

    // int64 max_time_ms = 2;


    pub fn get_max_time_ms(&self) -> i64 {
        self.max_time_ms
    }
    pub fn clear_max_time_ms(&mut self) {
        self.max_time_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_time_ms(&mut self, v: i64) {
        self.max_time_ms = v;
    }

    // .prometheus.Chunk.Encoding type = 3;


    pub fn get_field_type(&self) -> Chunk_Encoding {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Chunk_Encoding::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Chunk_Encoding) {
        self.field_type = v;
    }

    // bytes data = 4;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Chunk {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.min_time_ms = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.max_time_ms = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.min_time_ms != 0 {
            my_size += ::protobuf::rt::value_size(1, self.min_time_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_time_ms != 0 {
            my_size += ::protobuf::rt::value_size(2, self.max_time_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.field_type != Chunk_Encoding::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.min_time_ms != 0 {
            os.write_int64(1, self.min_time_ms)?;
        }
        if self.max_time_ms != 0 {
            os.write_int64(2, self.max_time_ms)?;
        }
        if self.field_type != Chunk_Encoding::UNKNOWN {
            os.write_enum(3, self.field_type.value())?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Chunk {
        Chunk::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "min_time_ms",
                    |m: &Chunk| { &m.min_time_ms },
                    |m: &mut Chunk| { &mut m.min_time_ms },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "max_time_ms",
                    |m: &Chunk| { &m.max_time_ms },
                    |m: &mut Chunk| { &mut m.max_time_ms },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Chunk_Encoding>>(
                    "type",
                    |m: &Chunk| { &m.field_type },
                    |m: &mut Chunk| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &Chunk| { &m.data },
                    |m: &mut Chunk| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Chunk>(
                    "Chunk",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Chunk {
        static mut instance: ::protobuf::lazy::Lazy<Chunk> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Chunk,
        };
        unsafe {
            instance.get(Chunk::new)
        }
    }
}

impl ::protobuf::Clear for Chunk {
    fn clear(&mut self) {
        self.min_time_ms = 0;
        self.max_time_ms = 0;
        self.field_type = Chunk_Encoding::UNKNOWN;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Chunk {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Chunk {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Chunk_Encoding {
    UNKNOWN = 0,
    XOR = 1,
}

impl ::protobuf::ProtobufEnum for Chunk_Encoding {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Chunk_Encoding> {
        match value {
            0 => ::std::option::Option::Some(Chunk_Encoding::UNKNOWN),
            1 => ::std::option::Option::Some(Chunk_Encoding::XOR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Chunk_Encoding] = &[
            Chunk_Encoding::UNKNOWN,
            Chunk_Encoding::XOR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Chunk_Encoding", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Chunk_Encoding {
}

impl ::std::default::Default for Chunk_Encoding {
    fn default() -> Self {
        Chunk_Encoding::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Chunk_Encoding {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChunkedSeries {
    // message fields
    pub labels: ::protobuf::RepeatedField<Label>,
    pub chunks: ::protobuf::RepeatedField<Chunk>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChunkedSeries {
    fn default() -> &'a ChunkedSeries {
        <ChunkedSeries as ::protobuf::Message>::default_instance()
    }
}

impl ChunkedSeries {
    pub fn new() -> ChunkedSeries {
        ::std::default::Default::default()
    }

    // repeated .prometheus.Label labels = 1;


    pub fn get_labels(&self) -> &[Label] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<Label>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<Label> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<Label> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }

    // repeated .prometheus.Chunk chunks = 2;


    pub fn get_chunks(&self) -> &[Chunk] {
        &self.chunks
    }
    pub fn clear_chunks(&mut self) {
        self.chunks.clear();
    }

    // Param is passed by value, moved
    pub fn set_chunks(&mut self, v: ::protobuf::RepeatedField<Chunk>) {
        self.chunks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_chunks(&mut self) -> &mut ::protobuf::RepeatedField<Chunk> {
        &mut self.chunks
    }

    // Take field
    pub fn take_chunks(&mut self) -> ::protobuf::RepeatedField<Chunk> {
        ::std::mem::replace(&mut self.chunks, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ChunkedSeries {
    fn is_initialized(&self) -> bool {
        for v in &self.labels {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.chunks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.labels)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.chunks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.chunks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.labels {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.chunks {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkedSeries {
        ChunkedSeries::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Label>>(
                    "labels",
                    |m: &ChunkedSeries| { &m.labels },
                    |m: &mut ChunkedSeries| { &mut m.labels },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Chunk>>(
                    "chunks",
                    |m: &ChunkedSeries| { &m.chunks },
                    |m: &mut ChunkedSeries| { &mut m.chunks },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkedSeries>(
                    "ChunkedSeries",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChunkedSeries {
        static mut instance: ::protobuf::lazy::Lazy<ChunkedSeries> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChunkedSeries,
        };
        unsafe {
            instance.get(ChunkedSeries::new)
        }
    }
}

impl ::protobuf::Clear for ChunkedSeries {
    fn clear(&mut self) {
        self.labels.clear();
        self.chunks.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkedSeries {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkedSeries {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0btypes.proto\x12\nprometheus\x1a\x14gogoproto/gogo.proto\"<\n\x06Sa\
    mple\x12\x14\n\x05value\x18\x01\x20\x01(\x01R\x05value\x12\x1c\n\ttimest\
    amp\x18\x02\x20\x01(\x03R\ttimestamp\"q\n\nTimeSeries\x12/\n\x06labels\
    \x18\x01\x20\x03(\x0b2\x11.prometheus.LabelR\x06labelsB\x04\xc8\xde\x1f\
    \0\x122\n\x07samples\x18\x02\x20\x03(\x0b2\x12.prometheus.SampleR\x07sam\
    plesB\x04\xc8\xde\x1f\0\"1\n\x05Label\x12\x12\n\x04name\x18\x01\x20\x01(\
    \tR\x04name\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\"9\n\x06Labe\
    ls\x12/\n\x06labels\x18\x01\x20\x03(\x0b2\x11.prometheus.LabelR\x06label\
    sB\x04\xc8\xde\x1f\0\"\x95\x01\n\x0cLabelMatcher\x121\n\x04type\x18\x01\
    \x20\x01(\x0e2\x1d.prometheus.LabelMatcher.TypeR\x04type\x12\x12\n\x04na\
    me\x18\x02\x20\x01(\tR\x04name\x12\x14\n\x05value\x18\x03\x20\x01(\tR\
    \x05value\"(\n\x04Type\x12\x06\n\x02EQ\x10\0\x12\x07\n\x03NEQ\x10\x01\
    \x12\x06\n\x02RE\x10\x02\x12\x07\n\x03NRE\x10\x03\"j\n\tReadHints\x12\
    \x17\n\x07step_ms\x18\x01\x20\x01(\x03R\x06stepMs\x12\x12\n\x04func\x18\
    \x02\x20\x01(\tR\x04func\x12\x19\n\x08start_ms\x18\x03\x20\x01(\x03R\x07\
    startMs\x12\x15\n\x06end_ms\x18\x04\x20\x01(\x03R\x05endMs\"\xad\x01\n\
    \x05Chunk\x12\x1e\n\x0bmin_time_ms\x18\x01\x20\x01(\x03R\tminTimeMs\x12\
    \x1e\n\x0bmax_time_ms\x18\x02\x20\x01(\x03R\tmaxTimeMs\x12.\n\x04type\
    \x18\x03\x20\x01(\x0e2\x1a.prometheus.Chunk.EncodingR\x04type\x12\x12\n\
    \x04data\x18\x04\x20\x01(\x0cR\x04data\"\x20\n\x08Encoding\x12\x0b\n\x07\
    UNKNOWN\x10\0\x12\x07\n\x03XOR\x10\x01\"q\n\rChunkedSeries\x12/\n\x06lab\
    els\x18\x01\x20\x03(\x0b2\x11.prometheus.LabelR\x06labelsB\x04\xc8\xde\
    \x1f\0\x12/\n\x06chunks\x18\x02\x20\x03(\x0b2\x11.prometheus.ChunkR\x06c\
    hunksB\x04\xc8\xde\x1f\0B\x08Z\x06prompbJ\xdf\x17\n\x06\x12\x04\r\0Q\x01\
    \n\xbc\x04\n\x01\x0c\x12\x03\r\0\x122\xb1\x04\x20Copyright\x202017\x20Pr\
    ometheus\x20Team\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20\
    Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\
    \x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License\
    .\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\
    \n\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requir\
    ed\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\x08\n\x01\x02\x12\x03\x0e\0\x13\n\x08\n\x01\x08\x12\
    \x03\x10\0\x1d\n\t\n\x02\x08\x0b\x12\x03\x10\0\x1d\n\t\n\x02\x03\0\x12\
    \x03\x12\0\x1e\n\n\n\x02\x04\0\x12\x04\x14\0\x17\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\x14\x08\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\x15\x02\x16\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x15\t\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x15\x14\x15\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\x16\x02\x16\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\x16\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x16\x08\x11\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03\x16\x14\x15\nP\n\x02\x04\x01\x12\x04\
    \x1a\0\x1d\x01\x1aD\x20TimeSeries\x20represents\x20samples\x20and\x20lab\
    els\x20for\x20a\x20single\x20time\x20series.\n\n\n\n\x03\x04\x01\x01\x12\
    \x03\x1a\x08\x12\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1b\x02=\n\x0c\n\x05\
    \x04\x01\x02\0\x04\x12\x03\x1b\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03\x1b\x0b\x10\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1b\x11\x17\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03\x1b\x1c\x1d\n\x0c\n\x05\x04\x01\x02\0\
    \x08\x12\x03\x1b\x1e<\n\x0f\n\x08\x04\x01\x02\0\x08\xe9\xfb\x03\x12\x03\
    \x1b\x1f;\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1c\x02=\n\x0c\n\x05\x04\
    \x01\x02\x01\x04\x12\x03\x1c\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\
    \x03\x1c\x0b\x11\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1c\x12\x19\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1c\x1c\x1d\n\x0c\n\x05\x04\x01\
    \x02\x01\x08\x12\x03\x1c\x1e<\n\x0f\n\x08\x04\x01\x02\x01\x08\xe9\xfb\
    \x03\x12\x03\x1c\x1f;\n\n\n\x02\x04\x02\x12\x04\x1f\0\"\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\x1f\x08\r\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x20\x02\
    \x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x20\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03\x20\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x20\
    \x11\x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x03!\x02\x13\n\x0c\n\x05\x04\
    \x02\x02\x01\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03!\t\x0e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03!\x11\x12\n\n\n\x02\
    \x04\x03\x12\x04$\0&\x01\n\n\n\x03\x04\x03\x01\x12\x03$\x08\x0e\n\x0b\n\
    \x04\x04\x03\x02\0\x12\x03%\x02;\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03%\
    \x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03%\x0b\x10\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03%\x11\x17\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03%\
    \x1a\x1b\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x03%\x1c:\n\x0f\n\x08\x04\x03\
    \x02\0\x08\xe9\xfb\x03\x12\x03%\x1d9\nP\n\x02\x04\x04\x12\x04)\03\x01\
    \x1aD\x20Matcher\x20specifies\x20a\x20rule,\x20which\x20can\x20match\x20\
    or\x20set\x20of\x20labels\x20or\x20not.\n\n\n\n\x03\x04\x04\x01\x12\x03)\
    \x08\x14\n\x0c\n\x04\x04\x04\x04\0\x12\x04*\x02/\x03\n\x0c\n\x05\x04\x04\
    \x04\0\x01\x12\x03*\x07\x0b\n\r\n\x06\x04\x04\x04\0\x02\0\x12\x03+\x04\
    \x0c\n\x0e\n\x07\x04\x04\x04\0\x02\0\x01\x12\x03+\x04\x06\n\x0e\n\x07\
    \x04\x04\x04\0\x02\0\x02\x12\x03+\n\x0b\n\r\n\x06\x04\x04\x04\0\x02\x01\
    \x12\x03,\x04\x0c\n\x0e\n\x07\x04\x04\x04\0\x02\x01\x01\x12\x03,\x04\x07\
    \n\x0e\n\x07\x04\x04\x04\0\x02\x01\x02\x12\x03,\n\x0b\n\r\n\x06\x04\x04\
    \x04\0\x02\x02\x12\x03-\x04\x0c\n\x0e\n\x07\x04\x04\x04\0\x02\x02\x01\
    \x12\x03-\x04\x06\n\x0e\n\x07\x04\x04\x04\0\x02\x02\x02\x12\x03-\n\x0b\n\
    \r\n\x06\x04\x04\x04\0\x02\x03\x12\x03.\x04\x0c\n\x0e\n\x07\x04\x04\x04\
    \0\x02\x03\x01\x12\x03.\x04\x07\n\x0e\n\x07\x04\x04\x04\0\x02\x03\x02\
    \x12\x03.\n\x0b\n\x0b\n\x04\x04\x04\x02\0\x12\x030\x02\x13\n\x0c\n\x05\
    \x04\x04\x02\0\x06\x12\x030\x02\x06\n\x0c\n\x05\x04\x04\x02\0\x01\x12\
    \x030\x07\x0b\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x030\x11\x12\n\x0b\n\x04\
    \x04\x04\x02\x01\x12\x031\x02\x13\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\
    \x031\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x031\t\r\n\x0c\n\x05\
    \x04\x04\x02\x01\x03\x12\x031\x11\x12\n\x0b\n\x04\x04\x04\x02\x02\x12\
    \x032\x02\x13\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x032\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\x02\x01\x12\x032\t\x0e\n\x0c\n\x05\x04\x04\x02\x02\x03\
    \x12\x032\x11\x12\n\n\n\x02\x04\x05\x12\x045\0:\x01\n\n\n\x03\x04\x05\
    \x01\x12\x035\x08\x11\n/\n\x04\x04\x05\x02\0\x12\x036\x02\x14\"\"\x20Que\
    ry\x20step\x20size\x20in\x20milliseconds.\n\n\x0c\n\x05\x04\x05\x02\0\
    \x05\x12\x036\x02\x07\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x036\x08\x0f\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x036\x12\x13\nL\n\x04\x04\x05\x02\x01\
    \x12\x037\x02\x12\"?\x20String\x20representation\x20of\x20surrounding\
    \x20function\x20or\x20aggregation.\n\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\
    \x037\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x037\t\r\n\x0c\n\x05\
    \x04\x05\x02\x01\x03\x12\x037\x10\x11\n*\n\x04\x04\x05\x02\x02\x12\x038\
    \x02\x15\"\x1d\x20Start\x20time\x20in\x20milliseconds.\n\n\x0c\n\x05\x04\
    \x05\x02\x02\x05\x12\x038\x02\x07\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\
    \x038\x08\x10\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x038\x13\x14\n(\n\x04\
    \x04\x05\x02\x03\x12\x039\x02\x13\"\x1b\x20End\x20time\x20in\x20millisec\
    onds.\n\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x039\x02\x07\n\x0c\n\x05\x04\
    \x05\x02\x03\x01\x12\x039\x08\x0e\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\
    \x039\x11\x12\nQ\n\x02\x04\x06\x12\x04>\0I\x01\x1aE\x20Chunk\x20represen\
    ts\x20a\x20TSDB\x20chunk.\n\x20Time\x20range\x20[min,\x20max]\x20is\x20i\
    nclusive.\n\n\n\n\x03\x04\x06\x01\x12\x03>\x08\r\n\x0b\n\x04\x04\x06\x02\
    \0\x12\x03?\x02\x18\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03?\x02\x07\n\x0c\
    \n\x05\x04\x06\x02\0\x01\x12\x03?\x08\x13\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x03?\x16\x17\n\x0b\n\x04\x04\x06\x02\x01\x12\x03@\x02\x18\n\x0c\n\
    \x05\x04\x06\x02\x01\x05\x12\x03@\x02\x07\n\x0c\n\x05\x04\x06\x02\x01\
    \x01\x12\x03@\x08\x13\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03@\x16\x17\n\
    ;\n\x04\x04\x06\x04\0\x12\x04C\x02F\x03\x1a-\x20We\x20require\x20this\
    \x20to\x20match\x20chunkenc.Encoding.\n\n\x0c\n\x05\x04\x06\x04\0\x01\
    \x12\x03C\x07\x0f\n\r\n\x06\x04\x06\x04\0\x02\0\x12\x03D\x04\x10\n\x0e\n\
    \x07\x04\x06\x04\0\x02\0\x01\x12\x03D\x04\x0b\n\x0e\n\x07\x04\x06\x04\0\
    \x02\0\x02\x12\x03D\x0e\x0f\n\r\n\x06\x04\x06\x04\0\x02\x01\x12\x03E\x04\
    \x10\n\x0e\n\x07\x04\x06\x04\0\x02\x01\x01\x12\x03E\x04\x07\n\x0e\n\x07\
    \x04\x06\x04\0\x02\x01\x02\x12\x03E\x0e\x0f\n\x0b\n\x04\x04\x06\x02\x02\
    \x12\x03G\x02\x15\n\x0c\n\x05\x04\x06\x02\x02\x06\x12\x03G\x02\n\n\x0c\n\
    \x05\x04\x06\x02\x02\x01\x12\x03G\x0b\x0f\n\x0c\n\x05\x04\x06\x02\x02\
    \x03\x12\x03G\x13\x14\n\x0b\n\x04\x04\x06\x02\x03\x12\x03H\x02\x15\n\x0c\
    \n\x05\x04\x06\x02\x03\x05\x12\x03H\x02\x07\n\x0c\n\x05\x04\x06\x02\x03\
    \x01\x12\x03H\x08\x0c\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03H\x13\x14\n\
    C\n\x02\x04\x07\x12\x04L\0Q\x01\x1a7\x20ChunkedSeries\x20represents\x20s\
    ingle,\x20encoded\x20time\x20series.\n\n\n\n\x03\x04\x07\x01\x12\x03L\
    \x08\x15\n'\n\x04\x04\x07\x02\0\x12\x03N\x02;\x1a\x1a\x20Labels\x20shoul\
    d\x20be\x20sorted.\n\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03N\x02\n\n\x0c\
    \n\x05\x04\x07\x02\0\x06\x12\x03N\x0b\x10\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x03N\x11\x17\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03N\x1a\x1b\n\x0c\n\
    \x05\x04\x07\x02\0\x08\x12\x03N\x1c:\n\x0f\n\x08\x04\x07\x02\0\x08\xe9\
    \xfb\x03\x12\x03N\x1d9\nB\n\x04\x04\x07\x02\x01\x12\x03P\x02;\x1a5\x20Ch\
    unks\x20will\x20be\x20in\x20start\x20time\x20order\x20and\x20may\x20over\
    lap.\n\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03P\x02\n\n\x0c\n\x05\x04\
    \x07\x02\x01\x06\x12\x03P\x0b\x10\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\
    \x03P\x11\x17\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03P\x1a\x1b\n\x0c\n\
    \x05\x04\x07\x02\x01\x08\x12\x03P\x1c:\n\x0f\n\x08\x04\x07\x02\x01\x08\
    \xe9\xfb\x03\x12\x03P\x1d9b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
