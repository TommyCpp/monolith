// This file is generated by rust-protobuf 2.10.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(warnings)]
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `remote.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_2;

#[derive(PartialEq, Clone, Default)]
pub struct WriteRequest {
    // message fields
    pub timeseries: ::protobuf::RepeatedField<super::types::TimeSeries>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteRequest {
    fn default() -> &'a WriteRequest {
        <WriteRequest as ::protobuf::Message>::default_instance()
    }
}

impl WriteRequest {
    pub fn new() -> WriteRequest {
        ::std::default::Default::default()
    }

    // repeated .prometheus.TimeSeries timeseries = 1;

    pub fn get_timeseries(&self) -> &[super::types::TimeSeries] {
        &self.timeseries
    }
    pub fn clear_timeseries(&mut self) {
        self.timeseries.clear();
    }

    // Param is passed by value, moved
    pub fn set_timeseries(&mut self, v: ::protobuf::RepeatedField<super::types::TimeSeries>) {
        self.timeseries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_timeseries(&mut self) -> &mut ::protobuf::RepeatedField<super::types::TimeSeries> {
        &mut self.timeseries
    }

    // Take field
    pub fn take_timeseries(&mut self) -> ::protobuf::RepeatedField<super::types::TimeSeries> {
        ::std::mem::replace(&mut self.timeseries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for WriteRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.timeseries {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(
                        wire_type,
                        is,
                        &mut self.timeseries,
                    )?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.timeseries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        for v in &self.timeseries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteRequest {
        WriteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::types::TimeSeries>,
                    >(
                        "timeseries",
                        |m: &WriteRequest| &m.timeseries,
                        |m: &mut WriteRequest| &mut m.timeseries,
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new::<WriteRequest>(
                    "WriteRequest",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static WriteRequest {
        static mut instance: ::protobuf::lazy::Lazy<WriteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WriteRequest,
        };
        unsafe { instance.get(WriteRequest::new) }
    }
}

impl ::protobuf::Clear for WriteRequest {
    fn clear(&mut self) {
        self.timeseries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct ReadRequest {
    // message fields
    pub queries: ::protobuf::RepeatedField<Query>,
    pub accepted_response_types: ::std::vec::Vec<ReadRequest_ResponseType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadRequest {
    fn default() -> &'a ReadRequest {
        <ReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadRequest {
    pub fn new() -> ReadRequest {
        ::std::default::Default::default()
    }

    // repeated .prometheus.Query queries = 1;

    pub fn get_queries(&self) -> &[Query] {
        &self.queries
    }
    pub fn clear_queries(&mut self) {
        self.queries.clear();
    }

    // Param is passed by value, moved
    pub fn set_queries(&mut self, v: ::protobuf::RepeatedField<Query>) {
        self.queries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_queries(&mut self) -> &mut ::protobuf::RepeatedField<Query> {
        &mut self.queries
    }

    // Take field
    pub fn take_queries(&mut self) -> ::protobuf::RepeatedField<Query> {
        ::std::mem::replace(&mut self.queries, ::protobuf::RepeatedField::new())
    }

    // repeated .prometheus.ReadRequest.ResponseType accepted_response_types = 2;

    pub fn get_accepted_response_types(&self) -> &[ReadRequest_ResponseType] {
        &self.accepted_response_types
    }
    pub fn clear_accepted_response_types(&mut self) {
        self.accepted_response_types.clear();
    }

    // Param is passed by value, moved
    pub fn set_accepted_response_types(&mut self, v: ::std::vec::Vec<ReadRequest_ResponseType>) {
        self.accepted_response_types = v;
    }

    // Mutable pointer to the field.
    pub fn mut_accepted_response_types(
        &mut self,
    ) -> &mut ::std::vec::Vec<ReadRequest_ResponseType> {
        &mut self.accepted_response_types
    }

    // Take field
    pub fn take_accepted_response_types(&mut self) -> ::std::vec::Vec<ReadRequest_ResponseType> {
        ::std::mem::replace(&mut self.accepted_response_types, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ReadRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.queries {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.queries)?;
                }
                2 => ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(
                    wire_type,
                    is,
                    &mut self.accepted_response_types,
                    2,
                    &mut self.unknown_fields,
                )?,
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.queries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.accepted_response_types {
            my_size += ::protobuf::rt::enum_size(2, *value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        for v in &self.queries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.accepted_response_types {
            os.write_enum(2, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRequest {
        ReadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<Query>,
                    >(
                        "queries",
                        |m: &ReadRequest| &m.queries,
                        |m: &mut ReadRequest| &mut m.queries,
                    ),
                );
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeEnum<ReadRequest_ResponseType>,
                >(
                    "accepted_response_types",
                    |m: &ReadRequest| &m.accepted_response_types,
                    |m: &mut ReadRequest| &mut m.accepted_response_types,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReadRequest>(
                    "ReadRequest",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static ReadRequest {
        static mut instance: ::protobuf::lazy::Lazy<ReadRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReadRequest,
        };
        unsafe { instance.get(ReadRequest::new) }
    }
}

impl ::protobuf::Clear for ReadRequest {
    fn clear(&mut self) {
        self.queries.clear();
        self.accepted_response_types.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum ReadRequest_ResponseType {
    SAMPLES = 0,
    STREAMED_XOR_CHUNKS = 1,
}

impl ::protobuf::ProtobufEnum for ReadRequest_ResponseType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ReadRequest_ResponseType> {
        match value {
            0 => ::std::option::Option::Some(ReadRequest_ResponseType::SAMPLES),
            1 => ::std::option::Option::Some(ReadRequest_ResponseType::STREAMED_XOR_CHUNKS),
            _ => ::std::option::Option::None,
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ReadRequest_ResponseType] = &[
            ReadRequest_ResponseType::SAMPLES,
            ReadRequest_ResponseType::STREAMED_XOR_CHUNKS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new(
                    "ReadRequest_ResponseType",
                    file_descriptor_proto(),
                )
            })
        }
    }
}

impl ::std::marker::Copy for ReadRequest_ResponseType {}

impl ::std::default::Default for ReadRequest_ResponseType {
    fn default() -> Self {
        ReadRequest_ResponseType::SAMPLES
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRequest_ResponseType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct ReadResponse {
    // message fields
    pub results: ::protobuf::RepeatedField<QueryResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadResponse {
    fn default() -> &'a ReadResponse {
        <ReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadResponse {
    pub fn new() -> ReadResponse {
        ::std::default::Default::default()
    }

    // repeated .prometheus.QueryResult results = 1;

    pub fn get_results(&self) -> &[QueryResult] {
        &self.results
    }
    pub fn clear_results(&mut self) {
        self.results.clear();
    }

    // Param is passed by value, moved
    pub fn set_results(&mut self, v: ::protobuf::RepeatedField<QueryResult>) {
        self.results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_results(&mut self) -> &mut ::protobuf::RepeatedField<QueryResult> {
        &mut self.results
    }

    // Take field
    pub fn take_results(&mut self) -> ::protobuf::RepeatedField<QueryResult> {
        ::std::mem::replace(&mut self.results, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ReadResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.results {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.results)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        for v in &self.results {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadResponse {
        ReadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<QueryResult>,
                    >(
                        "results",
                        |m: &ReadResponse| &m.results,
                        |m: &mut ReadResponse| &mut m.results,
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new::<ReadResponse>(
                    "ReadResponse",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static ReadResponse {
        static mut instance: ::protobuf::lazy::Lazy<ReadResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReadResponse,
        };
        unsafe { instance.get(ReadResponse::new) }
    }
}

impl ::protobuf::Clear for ReadResponse {
    fn clear(&mut self) {
        self.results.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct Query {
    // message fields
    pub start_timestamp_ms: i64,
    pub end_timestamp_ms: i64,
    pub matchers: ::protobuf::RepeatedField<super::types::LabelMatcher>,
    pub hints: ::protobuf::SingularPtrField<super::types::ReadHints>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Query {
    fn default() -> &'a Query {
        <Query as ::protobuf::Message>::default_instance()
    }
}

impl Query {
    pub fn new() -> Query {
        ::std::default::Default::default()
    }

    // int64 start_timestamp_ms = 1;

    pub fn get_start_timestamp_ms(&self) -> i64 {
        self.start_timestamp_ms
    }
    pub fn clear_start_timestamp_ms(&mut self) {
        self.start_timestamp_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_timestamp_ms(&mut self, v: i64) {
        self.start_timestamp_ms = v;
    }

    // int64 end_timestamp_ms = 2;

    pub fn get_end_timestamp_ms(&self) -> i64 {
        self.end_timestamp_ms
    }
    pub fn clear_end_timestamp_ms(&mut self) {
        self.end_timestamp_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_timestamp_ms(&mut self, v: i64) {
        self.end_timestamp_ms = v;
    }

    // repeated .prometheus.LabelMatcher matchers = 3;

    pub fn get_matchers(&self) -> &[super::types::LabelMatcher] {
        &self.matchers
    }
    pub fn clear_matchers(&mut self) {
        self.matchers.clear();
    }

    // Param is passed by value, moved
    pub fn set_matchers(&mut self, v: ::protobuf::RepeatedField<super::types::LabelMatcher>) {
        self.matchers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_matchers(&mut self) -> &mut ::protobuf::RepeatedField<super::types::LabelMatcher> {
        &mut self.matchers
    }

    // Take field
    pub fn take_matchers(&mut self) -> ::protobuf::RepeatedField<super::types::LabelMatcher> {
        ::std::mem::replace(&mut self.matchers, ::protobuf::RepeatedField::new())
    }

    // .prometheus.ReadHints hints = 4;

    pub fn get_hints(&self) -> &super::types::ReadHints {
        self.hints
            .as_ref()
            .unwrap_or_else(|| super::types::ReadHints::default_instance())
    }
    pub fn clear_hints(&mut self) {
        self.hints.clear();
    }

    pub fn has_hints(&self) -> bool {
        self.hints.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hints(&mut self, v: super::types::ReadHints) {
        self.hints = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hints(&mut self) -> &mut super::types::ReadHints {
        if self.hints.is_none() {
            self.hints.set_default();
        }
        self.hints.as_mut().unwrap()
    }

    // Take field
    pub fn take_hints(&mut self) -> super::types::ReadHints {
        self.hints
            .take()
            .unwrap_or_else(|| super::types::ReadHints::new())
    }
}

impl ::protobuf::Message for Query {
    fn is_initialized(&self) -> bool {
        for v in &self.matchers {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.hints {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.start_timestamp_ms = tmp;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.end_timestamp_ms = tmp;
                }
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.matchers)?;
                }
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.hints)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.start_timestamp_ms != 0 {
            my_size += ::protobuf::rt::value_size(
                1,
                self.start_timestamp_ms,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.end_timestamp_ms != 0 {
            my_size += ::protobuf::rt::value_size(
                2,
                self.end_timestamp_ms,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        for value in &self.matchers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.hints.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.start_timestamp_ms != 0 {
            os.write_int64(1, self.start_timestamp_ms)?;
        }
        if self.end_timestamp_ms != 0 {
            os.write_int64(2, self.end_timestamp_ms)?;
        }
        for v in &self.matchers {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.hints.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Query {
        Query::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "start_timestamp_ms",
                    |m: &Query| &m.start_timestamp_ms,
                    |m: &mut Query| &mut m.start_timestamp_ms,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "end_timestamp_ms",
                    |m: &Query| &m.end_timestamp_ms,
                    |m: &mut Query| &mut m.end_timestamp_ms,
                ));
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::types::LabelMatcher>,
                    >(
                        "matchers",
                        |m: &Query| &m.matchers,
                        |m: &mut Query| &mut m.matchers,
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::types::ReadHints>,
                    >(
                        "hints", |m: &Query| &m.hints, |m: &mut Query| &mut m.hints
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new::<Query>(
                    "Query",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Query {
        static mut instance: ::protobuf::lazy::Lazy<Query> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Query,
        };
        unsafe { instance.get(Query::new) }
    }
}

impl ::protobuf::Clear for Query {
    fn clear(&mut self) {
        self.start_timestamp_ms = 0;
        self.end_timestamp_ms = 0;
        self.matchers.clear();
        self.hints.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Query {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Query {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct QueryResult {
    // message fields
    pub timeseries: ::protobuf::RepeatedField<super::types::TimeSeries>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryResult {
    fn default() -> &'a QueryResult {
        <QueryResult as ::protobuf::Message>::default_instance()
    }
}

impl QueryResult {
    pub fn new() -> QueryResult {
        ::std::default::Default::default()
    }

    // repeated .prometheus.TimeSeries timeseries = 1;

    pub fn get_timeseries(&self) -> &[super::types::TimeSeries] {
        &self.timeseries
    }
    pub fn clear_timeseries(&mut self) {
        self.timeseries.clear();
    }

    // Param is passed by value, moved
    pub fn set_timeseries(&mut self, v: ::protobuf::RepeatedField<super::types::TimeSeries>) {
        self.timeseries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_timeseries(&mut self) -> &mut ::protobuf::RepeatedField<super::types::TimeSeries> {
        &mut self.timeseries
    }

    // Take field
    pub fn take_timeseries(&mut self) -> ::protobuf::RepeatedField<super::types::TimeSeries> {
        ::std::mem::replace(&mut self.timeseries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for QueryResult {
    fn is_initialized(&self) -> bool {
        for v in &self.timeseries {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(
                        wire_type,
                        is,
                        &mut self.timeseries,
                    )?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.timeseries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        for v in &self.timeseries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryResult {
        QueryResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::types::TimeSeries>,
                    >(
                        "timeseries",
                        |m: &QueryResult| &m.timeseries,
                        |m: &mut QueryResult| &mut m.timeseries,
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new::<QueryResult>(
                    "QueryResult",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static QueryResult {
        static mut instance: ::protobuf::lazy::Lazy<QueryResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const QueryResult,
        };
        unsafe { instance.get(QueryResult::new) }
    }
}

impl ::protobuf::Clear for QueryResult {
    fn clear(&mut self) {
        self.timeseries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct ChunkedReadResponse {
    // message fields
    pub chunked_series: ::protobuf::RepeatedField<super::types::ChunkedSeries>,
    pub query_index: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChunkedReadResponse {
    fn default() -> &'a ChunkedReadResponse {
        <ChunkedReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl ChunkedReadResponse {
    pub fn new() -> ChunkedReadResponse {
        ::std::default::Default::default()
    }

    // repeated .prometheus.ChunkedSeries chunked_series = 1;

    pub fn get_chunked_series(&self) -> &[super::types::ChunkedSeries] {
        &self.chunked_series
    }
    pub fn clear_chunked_series(&mut self) {
        self.chunked_series.clear();
    }

    // Param is passed by value, moved
    pub fn set_chunked_series(
        &mut self,
        v: ::protobuf::RepeatedField<super::types::ChunkedSeries>,
    ) {
        self.chunked_series = v;
    }

    // Mutable pointer to the field.
    pub fn mut_chunked_series(
        &mut self,
    ) -> &mut ::protobuf::RepeatedField<super::types::ChunkedSeries> {
        &mut self.chunked_series
    }

    // Take field
    pub fn take_chunked_series(
        &mut self,
    ) -> ::protobuf::RepeatedField<super::types::ChunkedSeries> {
        ::std::mem::replace(&mut self.chunked_series, ::protobuf::RepeatedField::new())
    }

    // int64 query_index = 2;

    pub fn get_query_index(&self) -> i64 {
        self.query_index
    }
    pub fn clear_query_index(&mut self) {
        self.query_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_query_index(&mut self, v: i64) {
        self.query_index = v;
    }
}

impl ::protobuf::Message for ChunkedReadResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.chunked_series {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(
                        wire_type,
                        is,
                        &mut self.chunked_series,
                    )?;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.query_index = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.chunked_series {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.query_index != 0 {
            my_size += ::protobuf::rt::value_size(
                2,
                self.query_index,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        for v in &self.chunked_series {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.query_index != 0 {
            os.write_int64(2, self.query_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkedReadResponse {
        ChunkedReadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::types::ChunkedSeries>,
                    >(
                        "chunked_series",
                        |m: &ChunkedReadResponse| &m.chunked_series,
                        |m: &mut ChunkedReadResponse| &mut m.chunked_series,
                    ),
                );
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "query_index",
                    |m: &ChunkedReadResponse| &m.query_index,
                    |m: &mut ChunkedReadResponse| &mut m.query_index,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChunkedReadResponse>(
                    "ChunkedReadResponse",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static ChunkedReadResponse {
        static mut instance: ::protobuf::lazy::Lazy<ChunkedReadResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChunkedReadResponse,
        };
        unsafe { instance.get(ChunkedReadResponse::new) }
    }
}

impl ::protobuf::Clear for ChunkedReadResponse {
    fn clear(&mut self) {
        self.chunked_series.clear();
        self.query_index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkedReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkedReadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cremote.proto\x12\nprometheus\x1a\x0btypes.proto\x1a\x14gogoproto/g\
    ogo.proto\"L\n\x0cWriteRequest\x12<\n\ntimeseries\x18\x01\x20\x03(\x0b2\
    \x16.prometheus.TimeSeriesR\ntimeseriesB\x04\xc8\xde\x1f\0\"\xce\x01\n\
    \x0bReadRequest\x12+\n\x07queries\x18\x01\x20\x03(\x0b2\x11.prometheus.Q\
    ueryR\x07queries\x12\\\n\x17accepted_response_types\x18\x02\x20\x03(\x0e\
    2$.prometheus.ReadRequest.ResponseTypeR\x15acceptedResponseTypes\"4\n\
    \x0cResponseType\x12\x0b\n\x07SAMPLES\x10\0\x12\x17\n\x13STREAMED_XOR_CH\
    UNKS\x10\x01\"A\n\x0cReadResponse\x121\n\x07results\x18\x01\x20\x03(\x0b\
    2\x17.prometheus.QueryResultR\x07results\"\xc2\x01\n\x05Query\x12,\n\x12\
    start_timestamp_ms\x18\x01\x20\x01(\x03R\x10startTimestampMs\x12(\n\x10e\
    nd_timestamp_ms\x18\x02\x20\x01(\x03R\x0eendTimestampMs\x124\n\x08matche\
    rs\x18\x03\x20\x03(\x0b2\x18.prometheus.LabelMatcherR\x08matchers\x12+\n\
    \x05hints\x18\x04\x20\x01(\x0b2\x15.prometheus.ReadHintsR\x05hints\"E\n\
    \x0bQueryResult\x126\n\ntimeseries\x18\x01\x20\x03(\x0b2\x16.prometheus.\
    TimeSeriesR\ntimeseries\"x\n\x13ChunkedReadResponse\x12@\n\x0echunked_se\
    ries\x18\x01\x20\x03(\x0b2\x19.prometheus.ChunkedSeriesR\rchunkedSeries\
    \x12\x1f\n\x0bquery_index\x18\x02\x20\x01(\x03R\nqueryIndexB\x08Z\x06pro\
    mpbJ\xa5\x19\n\x06\x12\x04\r\0Q\x01\n\xbc\x04\n\x01\x0c\x12\x03\r\0\x122\
    \xb1\x04\x20Copyright\x202016\x20Prometheus\x20Team\n\x20Licensed\x20und\
    er\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\"\
    );\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20comp\
    liance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\
    \x20of\x20the\x20License\x20at\n\n\x20http://www.apache.org/licenses/LIC\
    ENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20a\
    greed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20t\
    he\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\
    \n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\
    \x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20fo\
    r\x20the\x20specific\x20language\x20governing\x20permissions\x20and\n\
    \x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\
    \x0e\0\x13\n\x08\n\x01\x08\x12\x03\x10\0\x1d\n\t\n\x02\x08\x0b\x12\x03\
    \x10\0\x1d\n\t\n\x02\x03\0\x12\x03\x12\0\x15\n\t\n\x02\x03\x01\x12\x03\
    \x13\0\x1e\n\n\n\x02\x04\0\x12\x04\x15\0\x17\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x15\x08\x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\x16\x02O\n\x0c\n\x05\
    \x04\0\x02\0\x04\x12\x03\x16\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\
    \x16\x0b\x20\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x16!+\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x16./\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x160N\n\x0f\
    \n\x08\x04\0\x02\0\x08\xe9\xfb\x03\x12\x03\x161M\n;\n\x02\x04\x01\x12\
    \x04\x1a\04\x01\x1a/\x20ReadRequest\x20represents\x20a\x20remote\x20read\
    \x20request.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1a\x08\x13\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03\x1b\x02\x1d\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x1b\
    \x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1b\x0b\x10\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x1b\x11\x18\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x1b\x1b\x1c\n\x0c\n\x04\x04\x01\x04\0\x12\x04\x1d\x02,\x03\n\x0c\n\x05\
    \x04\x01\x04\0\x01\x12\x03\x1d\x07\x13\n\x8b\x02\n\x06\x04\x01\x04\0\x02\
    \0\x12\x03$\x04\x10\x1a\xfb\x01\x20Server\x20will\x20return\x20a\x20sing\
    le\x20ReadResponse\x20message\x20with\x20matched\x20series\x20that\x20in\
    cludes\x20list\x20of\x20raw\x20samples.\n\x20It's\x20recommended\x20to\
    \x20use\x20streamed\x20response\x20types\x20instead.\n\n\x20Response\x20\
    headers:\n\x20Content-Type:\x20\"application/x-protobuf\"\n\x20Content-E\
    ncoding:\x20\"snappy\"\n\n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\x12\x03$\
    \x04\x0b\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03$\x0e\x0f\n\xe9\x02\
    \n\x06\x04\x01\x04\0\x02\x01\x12\x03+\x04\x1c\x1a\xd9\x02\x20Server\x20w\
    ill\x20stream\x20a\x20delimited\x20ChunkedReadResponse\x20message\x20tha\
    t\x20contains\x20XOR\x20encoded\x20chunks\x20for\x20a\x20single\x20serie\
    s.\n\x20Each\x20message\x20is\x20following\x20varint\x20size\x20and\x20f\
    ixed\x20size\x20bigendian\x20uint32\x20for\x20CRC32\x20Castagnoli\x20che\
    cksum.\n\n\x20Response\x20headers:\n\x20Content-Type:\x20\"application/x\
    -streamed-protobuf;\x20proto=prometheus.ChunkedReadResponse\"\n\x20Conte\
    nt-Encoding:\x20\"\"\n\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x01\x12\x03+\
    \x04\x17\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x02\x12\x03+\x1a\x1b\n\xe0\
    \x02\n\x04\x04\x01\x02\x01\x12\x033\x024\x1a\xd2\x02\x20accepted_respons\
    e_types\x20allows\x20negotiating\x20the\x20content\x20type\x20of\x20the\
    \x20response.\n\n\x20Response\x20types\x20are\x20taken\x20from\x20the\
    \x20list\x20in\x20the\x20FIFO\x20order.\x20If\x20no\x20response\x20type\
    \x20in\x20`accepted_response_types`\x20is\n\x20implemented\x20by\x20serv\
    er,\x20error\x20is\x20returned.\n\x20For\x20request\x20that\x20do\x20not\
    \x20contain\x20`accepted_response_types`\x20field\x20the\x20SAMPLES\x20r\
    esponse\x20type\x20will\x20be\x20used.\n\n\x0c\n\x05\x04\x01\x02\x01\x04\
    \x12\x033\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x033\x0b\x17\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x033\x18/\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03323\nK\n\x02\x04\x02\x12\x047\0:\x01\x1a?\x20ReadResponse\x20is\
    \x20a\x20response\x20when\x20response_type\x20equals\x20SAMPLES.\n\n\n\n\
    \x03\x04\x02\x01\x12\x037\x08\x14\n6\n\x04\x04\x02\x02\0\x12\x039\x02#\
    \x1a)\x20In\x20same\x20order\x20as\x20the\x20request's\x20queries.\n\n\
    \x0c\n\x05\x04\x02\x02\0\x04\x12\x039\x02\n\n\x0c\n\x05\x04\x02\x02\0\
    \x06\x12\x039\x0b\x16\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x039\x17\x1e\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x039!\"\n\n\n\x02\x04\x03\x12\x04<\0A\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03<\x08\r\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03=\x02\x1f\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03=\x02\x07\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03=\x08\x1a\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03=\x1d\x1e\n\x0b\n\x04\x04\x03\x02\x01\x12\x03>\x02\x1d\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03>\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03>\x08\x18\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03>\x1b\x1c\n\x0b\
    \n\x04\x04\x03\x02\x02\x12\x03?\x020\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\
    \x03?\x02\n\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03?\x0b\"\n\x0c\n\x05\
    \x04\x03\x02\x02\x01\x12\x03?#+\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03?\
    ./\n\x0b\n\x04\x04\x03\x02\x03\x12\x03@\x02!\n\x0c\n\x05\x04\x03\x02\x03\
    \x06\x12\x03@\x02\x16\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03@\x17\x1c\n\
    \x0c\n\x05\x04\x03\x02\x03\x03\x12\x03@\x1f\x20\n\n\n\x02\x04\x04\x12\
    \x04C\0F\x01\n\n\n\x03\x04\x04\x01\x12\x03C\x08\x13\nD\n\x04\x04\x04\x02\
    \0\x12\x03E\x020\x1a7\x20Samples\x20within\x20a\x20time\x20series\x20mus\
    t\x20be\x20ordered\x20by\x20time.\n\n\x0c\n\x05\x04\x04\x02\0\x04\x12\
    \x03E\x02\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03E\x0b\x20\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03E!+\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03E./\n\
    \xe0\x02\n\x02\x04\x05\x12\x04L\0Q\x01\x1a\xd3\x02\x20ChunkedReadRespons\
    e\x20is\x20a\x20response\x20when\x20response_type\x20equals\x20STREAMED_\
    XOR_CHUNKS.\n\x20We\x20strictly\x20stream\x20full\x20series\x20after\x20\
    series,\x20optionally\x20split\x20by\x20time.\x20This\x20means\x20that\
    \x20a\x20single\x20frame\x20can\x20contain\n\x20partition\x20of\x20the\
    \x20single\x20series,\x20but\x20once\x20a\x20new\x20series\x20is\x20star\
    ted\x20to\x20be\x20streamed\x20it\x20means\x20that\x20no\x20more\x20chun\
    ks\x20will\n\x20be\x20sent\x20for\x20previous\x20one.\n\n\n\n\x03\x04\
    \x05\x01\x12\x03L\x08\x1b\n\x0b\n\x04\x04\x05\x02\0\x12\x03M\x027\n\x0c\
    \n\x05\x04\x05\x02\0\x04\x12\x03M\x02\n\n\x0c\n\x05\x04\x05\x02\0\x06\
    \x12\x03M\x0b#\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03M$2\n\x0c\n\x05\x04\
    \x05\x02\0\x03\x12\x03M56\nm\n\x04\x04\x05\x02\x01\x12\x03P\x02\x18\x1a`\
    \x20query_index\x20represents\x20an\x20index\x20of\x20the\x20query\x20fr\
    om\x20ReadRequest.queries\x20these\x20chunks\x20relates\x20to.\n\n\x0c\n\
    \x05\x04\x05\x02\x01\x05\x12\x03P\x02\x07\n\x0c\n\x05\x04\x05\x02\x01\
    \x01\x12\x03P\x08\x13\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03P\x16\x17b\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
